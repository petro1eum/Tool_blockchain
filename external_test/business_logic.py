#!/usr/bin/env python3
"""
üè¢ Business Logic with TrustChain

–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏, –∑–∞—â–∏—â–µ–Ω–Ω–æ–π TrustChain.

Author: Ed Cherednik (edcherednik@gmail.com)
Telegram: @EdCher
"""

import asyncio
import time
import hashlib
from typing import Dict, Any, List, Optional
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç TrustChain –∫–∞–∫ –≤–Ω–µ—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from trustchain import TrustedTool, TrustLevel
from trustchain.core.models import SignedResponse


# ==================== –§–ò–ù–ê–ù–°–û–í–´–ï –°–ï–†–í–ò–°–´ ====================

@TrustedTool("payment_processor", trust_level=TrustLevel.CRITICAL)
async def process_payment(
    amount: float, 
    from_account: str, 
    to_account: str,
    currency: str = "USD"
) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏.
    """
    # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–æ–≤
    await asyncio.sleep(0.1)
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (1% –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    fee = round(amount * 0.01, 2)
    final_amount = amount - fee
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction_data = f"{from_account}-{to_account}-{amount}-{time.time()}"
    transaction_id = hashlib.sha256(transaction_data.encode()).hexdigest()[:16]
    
    return {
        "transaction_id": f"tx_{transaction_id}",
        "amount": amount,
        "fee": fee,
        "final_amount": final_amount,
        "from_account": from_account,
        "to_account": to_account,
        "currency": currency,
        "status": "completed",
        "timestamp": datetime.now().isoformat(),
        "verified": True,
        "processor": "TrustChain Payment System"
    }


@TrustedTool("account_service", trust_level=TrustLevel.HIGH)
async def get_account_balance(account_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞ —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ–≤–µ—Ä–∏—è."""
    # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await asyncio.sleep(0.05)
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ ID
    balance_seed = hash(account_id) % 10000
    balance = abs(balance_seed) + 1000.0  # –ú–∏–Ω–∏–º—É–º $1000
    
    return {
        "account_id": account_id,
        "balance": balance,
        "currency": "USD",
        "account_type": "checking",
        "status": "active",
        "last_updated": datetime.now().isoformat(),
        "bank": "TrustChain Bank"
    }


# ==================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –°–ï–†–í–ò–°–´ ====================

@TrustedTool("user_service", trust_level=TrustLevel.HIGH)
async def get_user_profile(user_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞—â–∏—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    await asyncio.sleep(0.08)
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    user_seed = hash(user_id) % 1000
    
    return {
        "user_id": user_id,
        "username": f"user_{user_seed}",
        "email": f"user{user_seed}@trustchain.example",
        "full_name": f"User {user_seed} Smith",
        "registration_date": "2024-01-15",
        "verified": True,
        "subscription": "premium" if user_seed % 3 == 0 else "basic",
        "last_login": datetime.now().isoformat(),
        "profile_version": "2.1"
    }


@TrustedTool("auth_service", trust_level=TrustLevel.CRITICAL)
async def authenticate_user(username: str, password_hash: str) -> Dict[str, Any]:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    await asyncio.sleep(0.12)  # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    is_valid = len(password_hash) > 10 and password_hash.startswith("hash_")
    
    if is_valid:
        session_token = hashlib.sha256(f"{username}-{time.time()}".encode()).hexdigest()
        return {
            "username": username,
            "authenticated": True,
            "session_token": session_token,
            "expires_at": datetime.now().isoformat(),
            "permissions": ["read", "write"] if username.startswith("admin") else ["read"],
            "auth_method": "password",
            "login_timestamp": datetime.now().isoformat()
        }
    else:
        return {
            "username": username,
            "authenticated": False,
            "error": "Invalid credentials",
            "attempt_timestamp": datetime.now().isoformat(),
            "security_alert": True
        }


# ==================== –í–ù–ï–®–ù–ò–ï API –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ====================

@TrustedTool("market_data_api", trust_level=TrustLevel.MEDIUM)
async def fetch_stock_price(symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∞–∫—Ü–∏–π —Å –≤–Ω–µ—à–Ω–µ–≥–æ API."""
    await asyncio.sleep(0.15)  # –°–∏–º—É–ª—è—Ü–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
    
    # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∏
    stock_prices = {
        "AAPL": 192.45,
        "GOOGL": 2875.60,
        "MSFT": 425.20,
        "TSLA": 248.90,
        "AMZN": 3456.78,
        "META": 512.34
    }
    
    price = stock_prices.get(symbol.upper(), 100.0 + (hash(symbol) % 500))
    change = round((hash(symbol + "change") % 2000 - 1000) / 100, 2)
    
    return {
        "symbol": symbol.upper(),
        "price": price,
        "change": change,
        "change_percent": round((change / price) * 100, 2),
        "currency": "USD",
        "market": "NASDAQ",
        "volume": hash(symbol) % 1000000,
        "timestamp": datetime.now().isoformat(),
        "source": "TrustChain Market Data API"
    }


@TrustedTool("news_aggregator", trust_level=TrustLevel.MEDIUM)
async def get_financial_news(category: str = "general", limit: int = 5) -> Dict[str, Any]:
    """–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."""
    await asyncio.sleep(0.2)
    
    # –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
    news_templates = [
        "Market Report: {category} sector shows strong performance",
        "Breaking: Major announcement affects {category} trading",
        "Analysis: {category} trends for the upcoming quarter",
        "Update: Regulatory changes impact {category} market",
        "Spotlight: Innovation drives {category} growth"
    ]
    
    articles = []
    for i in range(min(limit, len(news_templates))):
        articles.append({
            "id": f"news_{hash(category + str(i)) % 10000}",
            "title": news_templates[i].format(category=category),
            "summary": f"Detailed analysis of {category} market conditions...",
            "source": f"TrustNews {i+1}",
            "published_at": datetime.now().isoformat(),
            "category": category,
            "relevance_score": round((hash(category + str(i)) % 100) / 100, 2)
        })
    
    return {
        "category": category,
        "articles": articles,
        "total_count": len(articles),
        "retrieved_at": datetime.now().isoformat(),
        "api_version": "v2.1",
        "source": "TrustChain News Aggregator"
    }


# ==================== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

@TrustedTool("audit_service", trust_level=TrustLevel.HIGH)
async def create_audit_log(
    action: str, 
    user_id: str, 
    resource: str, 
    details: Optional[Dict[str, Any]] = None
) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."""
    
    audit_id = hashlib.sha256(f"{action}-{user_id}-{resource}-{time.time()}".encode()).hexdigest()[:12]
    
    return {
        "audit_id": f"audit_{audit_id}",
        "action": action,
        "user_id": user_id,
        "resource": resource,
        "details": details or {},
        "timestamp": datetime.now().isoformat(),
        "ip_address": "192.168.1.100",  # –°–∏–º—É–ª—è—Ü–∏—è
        "user_agent": "TrustChain Client v1.0",
        "audit_level": "standard",
        "compliance": "SOX, GDPR",
        "retention_period": "7_years"
    }


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def simulate_business_workflow():
    """–°–∏–º—É–ª—è—Ü–∏—è —Ç–∏–ø–∏—á–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TrustChain."""
    print("üè¢ –°–∏–º—É–ª—è—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞ —Å TrustChain")
    print("=" * 45)
    
    # 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n1Ô∏è‚É£ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    auth_result = await authenticate_user("john_doe", "hash_secure_password_123")
    print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {auth_result.data['authenticated']}")
    
    if auth_result.data['authenticated']:
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        profile = await get_user_profile("john_doe")
        print(f"   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {profile.data['full_name']}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞...")
        balance = await get_account_balance("acc_123")
        print(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å: ${balance.data['balance']}")
        
        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        print("\n4Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...")
        payment = await process_payment(250.0, "acc_123", "acc_456")
        print(f"   ‚úÖ –ü–ª–∞—Ç–µ–∂: {payment.data['transaction_id']} - ${payment.data['final_amount']}")
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞
        print("\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞...")
        audit = await create_audit_log("payment", "john_doe", "acc_123", {
            "transaction_id": payment.data['transaction_id'],
            "amount": payment.data['amount']
        })
        print(f"   ‚úÖ –ê—É–¥–∏—Ç: {audit.data['audit_id']}")
        
        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞...")
        market_data = await fetch_stock_price("AAPL")
        print(f"   ‚úÖ AAPL: ${market_data.data['price']} ({market_data.data['change']:+.2f})")
    
    print("\nüéâ –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üîê –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã TrustChain")
    
    return True


# ==================== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def demonstrate_signature_verification():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ."""
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π")
    print("-" * 35)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    responses = []
    
    payment = await process_payment(100.0, "acc_001", "acc_002")
    user = await get_user_profile("test_user")
    stock = await fetch_stock_price("TSLA")
    
    responses.extend([payment, user, stock])
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π:")
    for i, response in enumerate(responses, 1):
        print(f"  {i}. Tool: {response.tool_id}")
        print(f"     Type: {type(response)}")
        print(f"     Verified: {response.is_verified}")
        print(f"     Signature: {response.signature.signature[:15]}...")
        print()
    
    return all(r.is_verified for r in responses)


if __name__ == "__main__":
    print("üè¢ TrustChain Business Logic Demo")
    print("Author: Ed Cherednik (@EdCher)")
    print()
    
    async def main():
        # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        await simulate_business_workflow()
        verification_success = await demonstrate_signature_verification()
        
        if verification_success:
            print("‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!")
            print("üîí –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â–µ–Ω–∞ TrustChain")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å—è–º–∏")
    
    asyncio.run(main()) 