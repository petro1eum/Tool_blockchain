#!/usr/bin/env python3
"""
üöÄ External Project Main Demo - TrustChain

–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–º–æ –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ TrustChain.

Author: Ed Cherednik (edcherednik@gmail.com)
Telegram: @EdCher

Run: python main.py
"""

import asyncio
import sys
from typing import List, Dict, Any

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
from business_logic import (
    process_payment,
    get_account_balance,
    get_user_profile,
    authenticate_user,
    fetch_stock_price,
    get_financial_news,
    create_audit_log,
    simulate_business_workflow,
    demonstrate_signature_verification
)

# –ò–º–ø–æ—Ä—Ç TrustChain –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
try:
    from trustchain.core.models import SignedResponse
    from trustchain import __version__ as trustchain_version
except ImportError:
    print("‚ùå TrustChain not available!")
    print("üîß Install it with: pip install -e ../")
    sys.exit(1)


class ExternalProjectDemo:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å TrustChain."""
    
    def __init__(self):
        self.results: List[SignedResponse] = []
        self.errors: List[str] = []
    
    def print_header(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–µ–º–æ."""
        print("üöÄ TrustChain External Project Demo")
        print("=" * 45)
        print(f"üì¶ TrustChain Version: {trustchain_version}")
        print(f"üë®‚Äçüíª Author: Ed Cherednik (@EdCher)")
        print(f"üéØ Goal: Demonstrate external library usage")
        print()
    
    async def test_critical_operations(self):
        """–¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
        print("üîí Testing CRITICAL trust level operations...")
        print("-" * 40)
        
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            auth = await authenticate_user("admin_user", "hash_secure_admin_pass")
            self.results.append(auth)
            print(f"‚úÖ Authentication: {auth.data['authenticated']}")
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
            payment = await process_payment(1500.0, "corporate_acc", "vendor_acc")
            self.results.append(payment)
            print(f"‚úÖ Payment: {payment.data['transaction_id']} - ${payment.data['final_amount']}")
            
            return True
        except Exception as e:
            error_msg = f"Critical operations failed: {e}"
            self.errors.append(error_msg)
            print(f"‚ùå {error_msg}")
            return False
    
    async def test_high_trust_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã—Å–æ–∫–æ–≥–æ –¥–æ–≤–µ—Ä–∏—è."""
        print("\nüîê Testing HIGH trust level operations...")
        print("-" * 40)
        
        try:
            # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = await get_user_profile("external_test_user")
            self.results.append(profile)
            print(f"‚úÖ User Profile: {profile.data['full_name']}")
            
            # –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
            balance = await get_account_balance("test_account_001")
            self.results.append(balance)
            print(f"‚úÖ Account Balance: ${balance.data['balance']}")
            
            # –ê—É–¥–∏—Ç –ª–æ–≥
            audit = await create_audit_log(
                "external_test", 
                "test_user", 
                "demo_resource",
                {"demo": True, "version": "1.0"}
            )
            self.results.append(audit)
            print(f"‚úÖ Audit Log: {audit.data['audit_id']}")
            
            return True
        except Exception as e:
            error_msg = f"High trust operations failed: {e}"
            self.errors.append(error_msg)
            print(f"‚ùå {error_msg}")
            return False
    
    async def test_medium_trust_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–æ–≤–µ—Ä–∏—è."""
        print("\nüìä Testing MEDIUM trust level operations...")
        print("-" * 40)
        
        try:
            # –î–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π
            stock = await fetch_stock_price("GOOGL")
            self.results.append(stock)
            print(f"‚úÖ Stock Data: {stock.data['symbol']} - ${stock.data['price']}")
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            news = await get_financial_news("tech", 3)
            self.results.append(news)
            print(f"‚úÖ Financial News: {news.data['total_count']} articles")
            
            return True
        except Exception as e:
            error_msg = f"Medium trust operations failed: {e}"
            self.errors.append(error_msg)
            print(f"‚ùå {error_msg}")
            return False
    
    def verify_all_signatures(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–µ–π."""
        print("\nüîç Verifying all cryptographic signatures...")
        print("-" * 45)
        
        verified_count = 0
        for i, result in enumerate(self.results, 1):
            tool_id = result.tool_id
            is_verified = result.is_verified
            signature_preview = result.signature.signature[:12] if hasattr(result, 'signature') else "N/A"
            
            print(f"  {i}. {tool_id}: {'‚úÖ' if is_verified else '‚ùå'} ({signature_preview}...)")
            
            if is_verified:
                verified_count += 1
        
        success_rate = (verified_count / len(self.results)) * 100 if self.results else 0
        print(f"\nüìà Verification Success Rate: {verified_count}/{len(self.results)} ({success_rate:.1f}%)")
        
        return success_rate == 100.0
    
    def display_security_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        print("\nüõ°Ô∏è Security Summary")
        print("-" * 20)
        
        trust_levels = {}
        for result in self.results:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –ø–æ tool_id
            if result.tool_id in ["auth_service", "payment_processor"]:
                level = "CRITICAL"
            elif result.tool_id in ["user_service", "account_service", "audit_service"]:
                level = "HIGH"
            else:
                level = "MEDIUM"
            
            trust_levels[level] = trust_levels.get(level, 0) + 1
        
        for level, count in trust_levels.items():
            print(f"  üîí {level}: {count} operations")
        
        print(f"\n  üìä Total Operations: {len(self.results)}")
        print(f"  ‚úÖ All Signed: {len(self.results)} signatures")
        print(f"  üîê All Verified: {all(r.is_verified for r in self.results)}")
        
        if self.errors:
            print(f"  ‚ùå Errors: {len(self.errors)}")
            for error in self.errors:
                print(f"     ‚Ä¢ {error}")
    
    async def run_comprehensive_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –¥–µ–º–æ."""
        self.print_header()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        critical_ok = await self.test_critical_operations()
        high_ok = await self.test_high_trust_operations() 
        medium_ok = await self.test_medium_trust_operations()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∏
        signatures_ok = self.verify_all_signatures()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        self.display_security_summary()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        all_tests_passed = critical_ok and high_ok and medium_ok and signatures_ok
        
        print("\nüèÜ Final Assessment")
        print("-" * 18)
        print(f"‚úÖ Critical Operations: {'PASS' if critical_ok else 'FAIL'}")
        print(f"‚úÖ High Trust Operations: {'PASS' if high_ok else 'FAIL'}")
        print(f"‚úÖ Medium Trust Operations: {'PASS' if medium_ok else 'FAIL'}")
        print(f"‚úÖ Signature Verification: {'PASS' if signatures_ok else 'FAIL'}")
        
        if all_tests_passed:
            print("\nüéâ SUCCESS: TrustChain external integration is PERFECT!")
            print("‚úÖ Ready for production use!")
            print("üîí All business operations are cryptographically secured!")
        else:
            print("\n‚ùå FAILURE: Some tests failed")
            print("üîß Check errors above and fix issues")
        
        return all_tests_passed


async def quick_integration_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
    print("‚ö° Quick Integration Test")
    print("-" * 25)
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        result = await get_user_profile("quick_test_user")
        
        print(f"‚úÖ Function call: SUCCESS")
        print(f"‚úÖ Return type: {type(result)}")
        print(f"‚úÖ Has signature: {hasattr(result, 'signature')}")
        print(f"‚úÖ Is verified: {result.is_verified}")
        print(f"‚úÖ Data access: {result.data['user_id']}")
        
        return True
    except Exception as e:
        print(f"‚ùå Quick test failed: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ."""
    print("üîß Starting TrustChain External Project Demo...")
    print()
    
    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    quick_ok = await quick_integration_test()
    if not quick_ok:
        print("\nüí• Quick test failed - stopping demo")
        return False
    
    print("\n" + "="*50)
    
    # –ü–æ–ª–Ω–æ–µ –¥–µ–º–æ
    demo = ExternalProjectDemo()
    success = await demo.run_comprehensive_demo()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ business_logic
    print("\n" + "="*50)
    print("üè¢ Additional Business Workflow Demo")
    print("="*50)
    
    try:
        await simulate_business_workflow()
        verification_result = await demonstrate_signature_verification()
        
        if verification_result:
            print("\n‚úÖ Business workflow signatures: ALL VERIFIED")
        else:
            print("\n‚ùå Business workflow signatures: SOME FAILED")
    except Exception as e:
        print(f"\n‚ùå Business workflow demo failed: {e}")
        success = False
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    print("\n" + "="*50)
    print("üéØ CONCLUSION")
    print("="*50)
    
    if success:
        print("üèÜ TrustChain external integration: COMPLETE SUCCESS!")
        print()
        print("Key achievements:")
        print("  ‚úÖ Library imports correctly")
        print("  ‚úÖ Decorators work seamlessly") 
        print("  ‚úÖ Signatures are created automatically")
        print("  ‚úÖ Verification works perfectly")
        print("  ‚úÖ All trust levels supported")
        print("  ‚úÖ Real business logic protected")
        print()
        print("üöÄ READY FOR PRODUCTION USE!")
    else:
        print("‚ùå Some issues detected in external integration")
        print("üîß Please review errors and fix before production use")
    
    return success


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Demo interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Unexpected error in demo: {e}")
        sys.exit(1) 