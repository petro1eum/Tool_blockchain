#!/usr/bin/env python3
"""
üß™ Quick External Test - TrustChain

–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ TrustChain —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤–Ω–µ—à–Ω—è—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞.

Author: Ed Cherednik (edcherednik@gmail.com)
Telegram: @EdCher

Run: python quick_test.py
"""

import asyncio
import sys
from typing import Dict, Any

def test_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    print("üß™ Quick TrustChain External Test")
    print("=" * 32)
    
    try:
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from trustchain import TrustedTool, TrustLevel, MemoryRegistry
        from trustchain.core.models import SignedResponse
        print("‚úÖ TrustChain import: SUCCESS")
        return True
    except ImportError as e:
        print(f"‚ùå TrustChain import: FAILED - {e}")
        print("üí° Fix: run 'pip install -e ../' from external_test directory")
        return False

def test_decorator():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @TrustedTool."""
    try:
        from trustchain import TrustedTool, TrustLevel
        
        @TrustedTool("external_quick_test", trust_level=TrustLevel.HIGH)
        async def test_function(message: str) -> Dict[str, Any]:
            """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞."""
            return {
                "message": message,
                "status": "processed", 
                "external_test": True,
                "function": "quick_test"
            }
        
        print("‚úÖ @TrustedTool decorator: SUCCESS")
        return test_function
    except Exception as e:
        print(f"‚ùå @TrustedTool decorator: FAILED - {e}")
        return None

async def test_signature_creation(test_func):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π."""
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = await test_func("Hello from external test!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ SignedResponse
        from trustchain.core.models import SignedResponse
        if isinstance(result, SignedResponse):
            print("‚úÖ Signature creation: SUCCESS")
            return result
        else:
            print(f"‚ùå Signature creation: FAILED - got {type(result)}")
            return None
    except Exception as e:
        print(f"‚ùå Signature creation: FAILED - {e}")
        return None

def test_signature_verification(result):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        if hasattr(result, 'is_verified') and result.is_verified:
            print("‚úÖ Signature verification: SUCCESS")
            return True
        else:
            print("‚ùå Signature verification: FAILED - signature not verified")
            return False
    except Exception as e:
        print(f"‚ùå Signature verification: FAILED - {e}")
        return False

def display_results(result):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞."""
    if result:
        print(f"‚úÖ Response type: {type(result)}")
        print(f"‚úÖ Data: {result.data}")
        print(f"‚úÖ Tool ID: {result.tool_id}")
        print(f"‚úÖ Is verified: {result.is_verified}")
        if hasattr(result, 'signature'):
            print(f"‚úÖ Signature: {result.signature.signature[:20]}...")
        
        return True
    return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    success_count = 0
    total_tests = 4
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç
    if test_import():
        success_count += 1
    else:
        print("\n‚ùå Critical error: Cannot import TrustChain")
        print("üîß Make sure you've installed TrustChain:")
        print("   cd ../")
        print("   pip install -e .")
        print("   cd external_test")
        sys.exit(1)
    
    # –¢–µ—Å—Ç 2: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
    test_func = test_decorator()
    if test_func:
        success_count += 1
    else:
        print("\n‚ùå Critical error: Decorator not working")
        sys.exit(1)
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    result = await test_signature_creation(test_func)
    if result:
        success_count += 1
    else:
        print("\n‚ùå Critical error: Signature creation failed")
        sys.exit(1)
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if test_signature_verification(result):
        success_count += 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if display_results(result):
        print("\nüéâ TrustChain external integration: PERFECT!")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∏—Ç–æ–≥
    print(f"\nüìä Test Results: {success_count}/{total_tests} passed")
    
    if success_count == total_tests:
        print("üèÜ ALL TESTS PASSED!")
        print("‚úÖ TrustChain is ready for external use!")
        return True
    else:
        print("‚ùå Some tests failed")
        print("üîß Check installation and try again")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
        sys.exit(1) 