#!/usr/bin/env python3
"""
üß™ Integration Tests for External TrustChain Project

Pytest —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TrustChain –≤ –≤–Ω–µ—à–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–µ.

Author: Ed Cherednik (edcherednik@gmail.com)
Telegram: @EdCher

Run: python test_integration.py
     –∏–ª–∏: python -m pytest test_integration.py -v
"""

import pytest
import asyncio
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
from business_logic import (
    process_payment,
    get_account_balance,
    get_user_profile,
    authenticate_user,
    fetch_stock_price,
    get_financial_news,
    create_audit_log
)

# –ò–º–ø–æ—Ä—Ç TrustChain
try:
    from trustchain.core.models import SignedResponse
    from trustchain import TrustLevel
    TRUSTCHAIN_AVAILABLE = True
except ImportError:
    TRUSTCHAIN_AVAILABLE = False


# ==================== –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ ====================

def test_trustchain_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ TrustChain."""
    assert TRUSTCHAIN_AVAILABLE, "TrustChain should be importable"


@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_basic_function_call():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏."""
    result = await get_user_profile("test_user_basic")
    
    assert result is not None
    assert isinstance(result, SignedResponse)
    assert hasattr(result, 'data')
    assert hasattr(result, 'signature')


# ==================== –¢–ï–°–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–ü–ï–†–ê–¶–ò–ô ====================

@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_user_authentication():
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    valid_auth = await authenticate_user("test_user", "hash_valid_password_123")
    
    assert isinstance(valid_auth, SignedResponse)
    assert valid_auth.is_verified
    assert valid_auth.data["authenticated"] is True
    assert valid_auth.tool_id == "auth_service"
    assert "session_token" in valid_auth.data
    
    # –ù–µ—É—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    invalid_auth = await authenticate_user("test_user", "invalid_password")
    
    assert isinstance(invalid_auth, SignedResponse)
    assert invalid_auth.is_verified  # –û—Ç–≤–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω, –Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    assert invalid_auth.data["authenticated"] is False
    assert "error" in invalid_auth.data


@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_payment_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    amount = 500.0
    from_acc = "test_from_account"
    to_acc = "test_to_account"
    
    result = await process_payment(amount, from_acc, to_acc)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    assert isinstance(result, SignedResponse)
    assert result.is_verified
    assert result.tool_id == "payment_processor"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = result.data
    assert data["amount"] == amount
    assert data["from_account"] == from_acc
    assert data["to_account"] == to_acc
    assert data["status"] == "completed"
    assert "transaction_id" in data
    assert "fee" in data
    assert "final_amount" in data
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
    expected_fee = amount * 0.01
    assert data["fee"] == expected_fee
    assert data["final_amount"] == amount - expected_fee


# ==================== –¢–ï–°–¢–´ –û–ü–ï–†–ê–¶–ò–ô –í–´–°–û–ö–û–ì–û –î–û–í–ï–†–ò–Ø ====================

@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_user_profile_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = "integration_test_user"
    
    result = await get_user_profile(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    assert isinstance(result, SignedResponse)
    assert result.is_verified
    assert result.tool_id == "user_service"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = result.data
    assert data["user_id"] == user_id
    assert "username" in data
    assert "email" in data
    assert "full_name" in data
    assert data["verified"] is True


@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_account_balance_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –±–∞–ª–∞–Ω—Å–æ–≤ —Å—á–µ—Ç–æ–≤."""
    account_id = "test_account_balance"
    
    result = await get_account_balance(account_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    assert isinstance(result, SignedResponse)
    assert result.is_verified
    assert result.tool_id == "account_service"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = result.data
    assert data["account_id"] == account_id
    assert "balance" in data
    assert isinstance(data["balance"], (int, float))
    assert data["balance"] >= 0  # –ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    assert data["currency"] == "USD"
    assert data["status"] == "active"


@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_audit_logging():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞."""
    result = await create_audit_log(
        action="test_action",
        user_id="test_user",
        resource="test_resource",
        details={"test": True, "integration": "pytest"}
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    assert isinstance(result, SignedResponse)
    assert result.is_verified
    assert result.tool_id == "audit_service"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = result.data
    assert data["action"] == "test_action"
    assert data["user_id"] == "test_user"
    assert data["resource"] == "test_resource"
    assert data["details"]["test"] is True
    assert "audit_id" in data
    assert "timestamp" in data


# ==================== –¢–ï–°–¢–´ –û–ü–ï–†–ê–¶–ò–ô –°–†–ï–î–ù–ï–ì–û –î–û–í–ï–†–ò–Ø ====================

@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_stock_price_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∞–∫—Ü–∏–π."""
    symbol = "AAPL"
    
    result = await fetch_stock_price(symbol)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    assert isinstance(result, SignedResponse)
    assert result.is_verified
    assert result.tool_id == "market_data_api"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = result.data
    assert data["symbol"] == symbol
    assert "price" in data
    assert isinstance(data["price"], (int, float))
    assert data["price"] > 0
    assert "change" in data
    assert "currency" in data


@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_financial_news_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."""
    category = "tech"
    limit = 3
    
    result = await get_financial_news(category, limit)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    assert isinstance(result, SignedResponse)
    assert result.is_verified
    assert result.tool_id == "news_aggregator"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = result.data
    assert data["category"] == category
    assert "articles" in data
    assert isinstance(data["articles"], list)
    assert len(data["articles"]) <= limit
    assert data["total_count"] == len(data["articles"])


# ==================== –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ====================

@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_signature_uniqueness():
    """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–µ–π."""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    result1 = await get_user_profile("user_1")
    result2 = await get_user_profile("user_2")
    result3 = await get_user_profile("user_1")  # –¢–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤
    
    # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã
    assert all(r.is_verified for r in [result1, result2, result3])
    
    # –ü–æ–¥–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ (–¥–∞–∂–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è)
    signatures = [r.signature.signature for r in [result1, result2, result3]]
    assert len(set(signatures)) == 3, "All signatures should be unique"


@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_response_integrity():
    """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤."""
    result = await process_payment(100.0, "test_from", "test_to")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    original_data = result.data.copy()
    original_signature = result.signature.signature
    
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∞—Ç–∞–∫–∞ –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å)
    try:
        result.data["amount"] = 999999.99  # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É
        
        # –ü–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —Å—Ç–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —ç—Ç–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å is_verified = False
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        result.data.update(original_data)
        
    except Exception:
        # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        pass


# ==================== –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ====================

@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_performance_multiple_calls():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤."""
    import time
    
    start_time = time.time()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [
        get_user_profile(f"perf_user_{i}") for i in range(10)
    ]
    
    results = await asyncio.gather(*tasks)
    
    end_time = time.time()
    total_time = end_time - start_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    assert len(results) == 10
    assert all(r.is_verified for r in results)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ)
    avg_time_per_call = total_time / 10
    assert avg_time_per_call < 1.0, f"Average time per call too slow: {avg_time_per_call}s"
    
    print(f"\nüìä Performance: {len(results)} calls in {total_time:.2f}s")
    print(f"üìä Average: {avg_time_per_call:.3f}s per call")


# ==================== –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´ ====================

@pytest.mark.asyncio
@pytest.mark.skipif(not TRUSTCHAIN_AVAILABLE, reason="TrustChain not available")
async def test_complete_business_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞."""
    # 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    auth = await authenticate_user("workflow_user", "hash_secure_password")
    assert auth.data["authenticated"] is True
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile = await get_user_profile("workflow_user")
    assert profile.data["user_id"] == "workflow_user"
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    balance = await get_account_balance("workflow_account")
    initial_balance = balance.data["balance"]
    
    # 4. –ü–ª–∞—Ç–µ–∂
    payment = await process_payment(50.0, "workflow_account", "target_account")
    assert payment.data["status"] == "completed"
    
    # 5. –ê—É–¥–∏—Ç
    audit = await create_audit_log(
        "workflow_test", 
        "workflow_user", 
        "workflow_account",
        {"payment_id": payment.data["transaction_id"]}
    )
    assert "audit_id" in audit.data
    
    # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã
    all_operations = [auth, profile, balance, payment, audit]
    assert all(op.is_verified for op in all_operations)
    
    # –í—Å–µ –ø–æ–¥–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
    signatures = [op.signature.signature for op in all_operations]
    assert len(set(signatures)) == len(signatures)


# ==================== –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í ====================

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üß™ Running TrustChain Integration Tests")
    print("=" * 40)
    
    if not TRUSTCHAIN_AVAILABLE:
        print("‚ùå TrustChain not available - install with: pip install -e ../")
        return False
    
    # –ó–∞–ø—É—Å–∫ pytest
    exit_code = pytest.main([__file__, "-v", "--tb=short"])
    
    if exit_code == 0:
        print("\nüéâ ALL INTEGRATION TESTS PASSED!")
        print("‚úÖ TrustChain external integration is working perfectly!")
        return True
    else:
        print("\n‚ùå Some integration tests failed")
        print("üîß Check errors above and fix issues")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1) 