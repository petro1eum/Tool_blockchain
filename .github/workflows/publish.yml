name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-install:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Install from wheel
      run: |
        pip install dist/*.whl
    
    - name: Test installation
      run: |
        python -c "
        import trustchain
        print(f'TrustChain version: {trustchain.__version__}')
        
        # Test v1 API (backward compatibility)
        try:
            from trustchain import TrustedTool, SignatureAlgorithm, TrustLevel
            print('✅ TrustChain v1 API available')
        except ImportError as e:
            print(f'⚠️ v1 API import warning: {e}')
        
        # Test v2 API (new)
        from trustchain.v2 import TrustChain, TrustChainConfig
        tc = TrustChain()
        
        @tc.tool('test_tool')
        def test_function(x):
            return {'result': x}
        
        result = test_function(42)
        assert result.is_verified, 'Verification failed'
        assert result.data['result'] == 42, 'Data mismatch'
        print('✅ TrustChain v2 API working correctly')
        print('✅ TrustChain installed successfully')
        "

  publish-testpypi:
    needs: [build, test-install]
    runs-on: ubuntu-latest
    environment: testpypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  test-testpypi:
    needs: publish-testpypi
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Test installation from TestPyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ trustchain
        python -c "
        import trustchain
        print(f'TrustChain version from TestPyPI: {trustchain.__version__}')
        
        # Quick v2 test
        from trustchain.v2 import TrustChain
        tc = TrustChain()
        print('✅ TrustChain v2 working from TestPyPI')
        "

  publish-pypi:
    needs: [build, test-install, test-testpypi]
    runs-on: ubuntu-latest
    environment: pypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  update-docs:
    needs: publish-pypi
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Trigger documentation update
      run: |
        echo "Documentation update triggered"
        # Add webhook or API call to update documentation
    
    - name: Create GitHub deployment
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Deploy to PyPI completed'
          }); 