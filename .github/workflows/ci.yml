name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with black
      run: |
        black --check trustchain/ tests/ examples/
    
    - name: Sort imports with isort
      run: |
        isort --check-only trustchain/ tests/ examples/
    
    - name: Type check with mypy
      run: |
        mypy trustchain/
      continue-on-error: true  # Allow type errors for now
    
    - name: Test with pytest
      run: |
        pip install pytest-cov || echo "Coverage package not available"
        pytest tests/ --cov=trustchain --cov-report=xml --cov-report=html || pytest tests/
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .
    
    - name: Run security scan with bandit
      run: |
        bandit -r trustchain/ --severity-level medium || echo "Bandit scan completed with warnings"
      continue-on-error: true
    
    - name: Check dependencies with safety (skip login for CI)
      run: |
        echo "Safety scan skipped in CI due to authentication requirements"
        echo "Run 'safety scan' locally after authentication for security checks"
      continue-on-error: true

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run performance tests
      run: |
        python examples/hallucination_detection_demo.py
    
    - name: Benchmark cryptographic operations
      run: |
        python -c "
        import time
        import asyncio
        from trustchain import TrustedTool
        
        @TrustedTool('benchmark_tool', require_nonce=False)
        def benchmark_tool(data):
            return {'processed': data}
        
        async def benchmark():
            start = time.time()
            tasks = [benchmark_tool(f'data_{i}', verify_response=False) for i in range(100)]
            await asyncio.gather(*tasks)
            end = time.time()
            avg_time = (end - start) * 1000 / 100
            print(f'Average time per operation: {avg_time:.2f}ms')
            assert avg_time < 10, f'Performance regression: {avg_time:.2f}ms > 10ms'
        
        asyncio.run(benchmark())
        "

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install sphinx sphinx-rtd-theme
    
    - name: Build documentation
      run: |
        # sphinx-build -b html docs docs/_build/html
        echo "Documentation build placeholder"
    
    - name: Check links in documentation
      run: |
        echo "Link checking placeholder"

  examples:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test hallucination detection demo
      run: |
        python examples/hallucination_detection_demo.py
    
    - name: Test simple hallucination test
      run: |
        python examples/simple_hallucination_test.py
    
    - name: Test basic usage example
      run: |
        python examples/basic_usage.py
    
    - name: Test OpenAI/Anthropic integration (without API keys)
      run: |
        python examples/openai_anthropic_integration.py 