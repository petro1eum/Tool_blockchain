name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with black
      run: |
        black --check trustchain/ tests/ examples/
    
    - name: Sort imports with isort
      run: |
        isort --check-only trustchain/ tests/ examples/ --skip trustchain/core/__init__.py
    
    - name: Lint with ruff
      run: |
        ruff check trustchain/ tests/ examples/ --ignore I001
    
    - name: Test stable test suite
      run: |
        python -m pytest tests/test_v2_basic.py tests/test_llm_tool_calling.py tests/test_real_llm_clean.py --cov=trustchain --cov-report=xml -v
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit
        pip install -e .
    
    - name: Run security scan with bandit
      run: |
        bandit -r trustchain/ --severity-level medium

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run performance tests
      run: |
        python examples/basic_usage.py
    
    - name: Benchmark cryptographic operations (v2)
      run: |
        python -c "
        import time
        import asyncio
        from trustchain.v2 import TrustChain, TrustChainConfig
        
        # Create TrustChain instance for benchmarking
        tc = TrustChain(TrustChainConfig(enable_nonce=False, enable_cache=False))
        
        @tc.tool('benchmark_tool')
        def benchmark_tool(data):
            return {'processed': data}
        
        async def benchmark():
            start = time.time()
            results = []
            for i in range(50):
                result = benchmark_tool(f'data_{i}')
                results.append(result)
            
            end = time.time()
            avg_time = (end - start) * 1000 / 50
            print(f'Average time per operation (v2): {avg_time:.2f}ms')
            print(f'All results verified: {all(r.is_verified for r in results)}')
            assert avg_time < 15, f'Performance regression: {avg_time:.2f}ms > 15ms'
        
        asyncio.run(benchmark())
        "

  examples:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test basic usage example (v2)
      run: |
        python examples/basic_usage.py
    
    - name: Test security vulnerability demo (v2)
      run: |
        python examples/security_vulnerability_demo.py
    
    - name: Test full enforcement demo (v2)
      run: |
        python examples/full_enforcement_demo.py
    
    - name: Test LLM integration examples (v2, without API keys)
      run: |
        python examples/llm_real_api_examples.py 